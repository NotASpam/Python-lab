name: test

on: push

jobs:
  test:
    permissions:
      contents: write 
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       Check out repo and set up Python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      #----------------------------------------------
      #       Install & configure Poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      #----------------------------------------------
      #       Load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          
      #----------------------------------------------
      #       Install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      #----------------------------------------------
      #       Install the root project if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction

      #----------------------------------------------
      #       Run tests with tox
      #----------------------------------------------
      - name: Run tests
        run: poetry run tox

      #----------------------------------------------
      #       Generate coverage badge
      #----------------------------------------------
      - name: Coverage Badge
        uses: tj-actions/coverage-badge-py@v2

      #----------------------------------------------
      #       Verify changed files for coverage badge
      #----------------------------------------------
      - name: Verify Changed files
        uses: tj-actions/verify-changed-files@v16
        id: verify-changed-files
        with:
          files: coverage.svg

      #----------------------------------------------
      #       Install additional dependencies if required
      #----------------------------------------------
      - name: Install additional dependencies
        run: poetry install -E docs

      #----------------------------------------------
      #       Build documentation
      #----------------------------------------------
      - name: Build documentation
        run: |
          mkdir gh-pages
          touch gh-pages/.nojekyll
          cd docs/
          poetry run sphinx-build -b html . _build
          cp -r _build/* ../gh-pages/

      #----------------------------------------------
      #       Deploy documentation to GitHub Pages
      #----------------------------------------------
      - name: Deploy documentation
        if: ${{ github.event_name == 'push' }}
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: gh-pages
          folder: gh-pages

      #----------------------------------------------
      #       Commit changes for coverage badge
      #----------------------------------------------
      - name: Commit files
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add coverage.svg
          git commit -m "Updated coverage.svg"

      #----------------------------------------------
      #       Push changes to the repository
      #----------------------------------------------
      - name: Push changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.github_token }}
          branch: ${{ github.ref }}
